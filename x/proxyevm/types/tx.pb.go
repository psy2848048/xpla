// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xpla/proxyevm/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/evmos/ethermint/x/evm/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCallEVM submits the given message data to a evm smart contract
type MsgCallEVM struct {
	// Sender is the that actor that signed the messages
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Contract is the address of the smart contract
	Contract string `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	// Msg json encoded message to be passed to the contract
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Funds coins that are transferred to the contract on execution
	Funds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=funds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"funds"`
}

func (m *MsgCallEVM) Reset()         { *m = MsgCallEVM{} }
func (m *MsgCallEVM) String() string { return proto.CompactTextString(m) }
func (*MsgCallEVM) ProtoMessage()    {}
func (*MsgCallEVM) Descriptor() ([]byte, []int) {
	return fileDescriptor_305c6172a5404da8, []int{0}
}
func (m *MsgCallEVM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCallEVM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCallEVM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCallEVM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCallEVM.Merge(m, src)
}
func (m *MsgCallEVM) XXX_Size() int {
	return m.Size()
}
func (m *MsgCallEVM) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCallEVM.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCallEVM proto.InternalMessageInfo

func (m *MsgCallEVM) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCallEVM) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *MsgCallEVM) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MsgCallEVM) GetFunds() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Funds
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgCallEVM)(nil), "xpla.proxyevm.v1beta1.MsgCallEVM")
}

func init() { proto.RegisterFile("xpla/proxyevm/v1beta1/tx.proto", fileDescriptor_305c6172a5404da8) }

var fileDescriptor_305c6172a5404da8 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x3f, 0x52, 0xeb, 0x30,
	0x10, 0xc6, 0xad, 0x97, 0x97, 0x00, 0x82, 0x4a, 0x03, 0x8c, 0xe3, 0x42, 0x09, 0x34, 0xb8, 0x41,
	0x22, 0xe1, 0x06, 0xc9, 0xa4, 0x4c, 0xe3, 0x01, 0x0a, 0x86, 0x46, 0xb6, 0x85, 0xe3, 0x21, 0x96,
	0x3c, 0x96, 0x92, 0x71, 0x6e, 0xc1, 0x39, 0xb8, 0x00, 0x57, 0x48, 0x99, 0x92, 0x0a, 0x98, 0xe4,
	0x22, 0x8c, 0xe5, 0x3f, 0xa1, 0xa0, 0xda, 0x5d, 0xff, 0xd6, 0xbb, 0xdf, 0x7e, 0x82, 0x38, 0x4f,
	0xe7, 0x8c, 0xa6, 0x99, 0xcc, 0x57, 0x7c, 0x99, 0xd0, 0xe5, 0xc0, 0xe7, 0x9a, 0x0d, 0xa8, 0xce,
	0x49, 0x9a, 0x49, 0x2d, 0xd1, 0x59, 0xc1, 0x49, 0xcd, 0x49, 0xc5, 0x9d, 0xd3, 0x48, 0x46, 0xd2,
	0x74, 0xd0, 0x22, 0x2b, 0x9b, 0x1d, 0x1c, 0x48, 0x95, 0x48, 0x45, 0x7d, 0xa6, 0x78, 0x33, 0x2a,
	0x90, 0xb1, 0xa8, 0x78, 0x97, 0xeb, 0x19, 0xcf, 0x92, 0x58, 0x68, 0x5a, 0x2e, 0x6b, 0xf6, 0x5c,
	0xbe, 0x03, 0x08, 0xa7, 0x2a, 0x1a, 0xb3, 0xf9, 0x7c, 0xf2, 0x30, 0x45, 0xe7, 0xb0, 0xa3, 0xb8,
	0x08, 0x79, 0x66, 0x83, 0x3e, 0x70, 0x8f, 0xbc, 0xaa, 0x42, 0x0e, 0x3c, 0x0c, 0xa4, 0xd0, 0x19,
	0x0b, 0xb4, 0xfd, 0xcf, 0x90, 0xa6, 0x46, 0x08, 0xfe, 0x0f, 0x99, 0x66, 0x76, 0xab, 0x0f, 0xdc,
	0x13, 0xcf, 0xe4, 0x88, 0xc1, 0xf6, 0xf3, 0x42, 0x84, 0xca, 0x6e, 0xf7, 0x5b, 0xee, 0xf1, 0xb0,
	0x4b, 0x4a, 0x85, 0xa4, 0x50, 0x58, 0x1f, 0x43, 0xc6, 0x32, 0x16, 0xa3, 0x9b, 0xf5, 0x67, 0xcf,
	0x7a, 0xfb, 0xea, 0xb9, 0x51, 0xac, 0x67, 0x0b, 0x9f, 0x04, 0x32, 0xa1, 0xd5, 0x39, 0x65, 0xb8,
	0x56, 0xe1, 0x0b, 0xd5, 0xab, 0x94, 0x2b, 0xf3, 0x83, 0xf2, 0xca, 0xc9, 0xc3, 0x27, 0xd8, 0x9a,
	0xaa, 0x08, 0xdd, 0xc3, 0x83, 0x5a, 0xfc, 0x05, 0xf9, 0xd3, 0x34, 0xb2, 0xbf, 0xcf, 0xb9, 0x22,
	0x8d, 0x15, 0xa4, 0x6c, 0x29, 0xe8, 0xa4, 0xf8, 0xc6, 0x17, 0xc9, 0x5d, 0xee, 0x71, 0x95, 0x4a,
	0xa1, 0xf8, 0x68, 0xb4, 0xde, 0x62, 0xb0, 0xd9, 0x62, 0xf0, 0xbd, 0xc5, 0xe0, 0x75, 0x87, 0xad,
	0xcd, 0x0e, 0x5b, 0x1f, 0x3b, 0x6c, 0x3d, 0xfe, 0x16, 0x5a, 0xec, 0x0b, 0xf9, 0xd2, 0x44, 0x9a,
	0xef, 0x9f, 0xd3, 0xc8, 0xf5, 0x3b, 0xc6, 0xe2, 0xdb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75,
	0x9c, 0xac, 0xce, 0xec, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// FundFeeCollector defines a method to allow an account to directly
	// fund the fee collector.
	CallEVM(ctx context.Context, in *MsgCallEVM, opts ...grpc.CallOption) (*types1.MsgEthereumTxResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CallEVM(ctx context.Context, in *MsgCallEVM, opts ...grpc.CallOption) (*types1.MsgEthereumTxResponse, error) {
	out := new(types1.MsgEthereumTxResponse)
	err := c.cc.Invoke(ctx, "/xpla.proxyevm.v1beta1.Msg/CallEVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// FundFeeCollector defines a method to allow an account to directly
	// fund the fee collector.
	CallEVM(context.Context, *MsgCallEVM) (*types1.MsgEthereumTxResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CallEVM(ctx context.Context, req *MsgCallEVM) (*types1.MsgEthereumTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallEVM not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CallEVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCallEVM)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CallEVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xpla.proxyevm.v1beta1.Msg/CallEVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CallEVM(ctx, req.(*MsgCallEVM))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xpla.proxyevm.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallEVM",
			Handler:    _Msg_CallEVM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xpla/proxyevm/v1beta1/tx.proto",
}

func (m *MsgCallEVM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCallEVM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCallEVM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCallEVM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCallEVM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCallEVM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCallEVM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, types.Coin{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
